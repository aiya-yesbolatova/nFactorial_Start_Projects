//NBody.java is a program to simulate the motion of n particles (bodies) in the plane, 
//mutually affected by gravitational forces, and animate the results.

//Goals of this project are:
//To learn about reading input using the StdIn library and printing formatted output using the StdOut library.
//To learn about graphics and animation using the StdDraw library.
//To learn about using the command line to redirect standard input to read from a file.
//To gain more experience using arrays and loops.
//Decompose a large program into small, manageable steps - key to becoming a power programmer!



public class NBody {
    public static void main(String[] args) {
        double simTime = Double.parseDouble(args[0]);
        double deltaT = Double.parseDouble(args[1]);

        int n = StdIn.readInt();
        double radius = StdIn.readDouble();
        double[] px = new double[n];
        double[] py = new double[n];
        double[] vx = new double[n];
        double[] vy = new double[n];
        double[] mass = new double[n];
        String[] image = new String[n];
        double[] Fx = new double[n];
        double[] Fy = new double[n];
        double[] ax = new double[n];
        double[] ay = new double[n];
        double G = 6.67e-11;
        int x = 0, y = 0;

        for (int i = 0; i < n; i++) {
            px[i] = StdIn.readDouble();
            py[i] = StdIn.readDouble();
            vx[i] = StdIn.readDouble();
            vy[i] = StdIn.readDouble();
            mass[i] = StdIn.readDouble();
            image[i] = StdIn.readString();
        }

        StdDraw.setXscale(-radius, radius);
        StdDraw.setYscale(-radius, radius);
        StdDraw.enableDoubleBuffering();
        StdAudio.play("2001.wav");

        for (double t = 0; t < simTime; t += deltaT) {
            for (int k = 0; k < n; k++) {
                Fx[k] = 0;
                Fy[k] = 0;
            }
            for (int l = 0; l < n; l++) {
                for (int m = 0; m < n; m++) {
                    if (l != m) {
                        double deltaX = px[m] - px[l];
                        double deltaY = py[m] - py[l];
                        double r = deltaX * deltaX + deltaY * deltaY;
                        double F = G * mass[l] * mass[m] / r;
                        Fx[l] += F * deltaX / Math.sqrt(r);
                        Fy[l] += F * deltaY / Math.sqrt(r);
                    }
                }
            }

            for (int i = 0; i < n; i++) {
                ax[i] = Fx[i] / mass[i];
                ay[i] = Fy[i] / mass[i];
                vx[i] = vx[i] + ax[i] * deltaT;
                vy[i] = vy[i] + ay[i] * deltaT;
                px[i] = px[i] + vx[i] * deltaT;
                py[i] = py[i] + vy[i] * deltaT;
            }

            StdDraw.picture(x, y, "starfield.jpg");

            for (int j = 0; j < n; j++) {
                StdDraw.picture(px[j], py[j], image[j]);
            }

            StdDraw.show();
            StdDraw.pause(20);
        }
        StdOut.printf("%d\n", n);
        StdOut.printf("%.2e\n", radius);
        for (int i = 0; i < n; i++) {
            StdOut.printf("%11.4e %11.4e %11.4e %11.4e %11.4e %12s\n",
                          px[i], py[i], vx[i], vy[i], mass[i], image[i]);
        }

    }
}
