//Transform2D.java is a library of static methods that performs various geometric transforms on polygons.
//Mathematically, a polygon is defined by its sequence of vertices (x0, y0), (x1, y1), (x2, y2),... 

public class Transform2D {
    // Scales the polygon by the factor alpha.
    public static void scale(double[] x, double[] y, double alpha) {
        int size = x.length;
        double[] tempX = new double[size];
        double[] tempY = new double[size];
        for (int j = 0; j <= size; j++) {
            tempX[j] = alpha * x[j];
            tempY[j] = alpha * y[j];
        }
    }

    // Translates the polygon by (dx, dy).
    public static void translate(double[] x, double[] y, double dx, double dy) {
        int size = x.length;
        double[] tempX = new double[size];
        double[] tempY = new double[size];
        for (int k = 0; k <= size; k++) {
            tempX[k] = x[k] + dx;
            tempY[k] = y[k] + dy;
        }
    }

    // Returns a new array object that is an exact copy of the given array.
    // The given array is not mutated.
    public static double[] copy(double[] array) {
        int size = array.length;
        double[] temp = new double[size]
        for (int i = 0; i <= size; i++) {
            temp[i] = array[i];
        }
        return temp;
    }

    // Rotates the polygon theta degrees counterclockwise, about the origin.
    public static void rotate(double[] x, double[] y, double theta) {
        int size = x.length;
        double[] tempX = new double[size];
        double[] tempY = new double[size];
        for (int m = 0; m <= size; m++) {
            tempX[m] = Math.toRadians(x[m]) * Math.cos(theta) -
                    Math.toRadians(y[m]) * Math.sin(theta);
            tempY[m] = Math.toRadians(y[m]) * Math.cos(theta) +
                    Math.toRadians(x[m]) * Math.sin(theta);
        }
    }

    // Tests each of the API methods by directly calling them.
    public static void main(String[] args) {
        // Set the x- and y-scale
        StdDraw.setScale(-5.0, 5.0);

        // Original polygon
        int a = (int) Math.random() *
        double[] x = { 0, 1, 1, 0 };
        double[] y = { 0, 0, 2, 1 };

        // Draw the original polygon
        StdDraw.setPenColor(StdDraw.RED);
        StdDraw.polygon(x, y);

        // Copy of original polygon
        double[] cx = Transform2D.copy(x);
        double[] cy = Transform2D.copy(y);

        // Rotate, translate and draw the copy
        Transform2D.scale(cx, cy, 2.0);
        Transform2D.rotate(cx, cy, -45.0);
        Transform2D.translate(cx, cy, 1.0, 2.0);
        StdDraw.setPenColor(StdDraw.BLUE);
        StdDraw.polygon(cx, cy);
    }
}

//Sierpinski.java is a recursive function sierpinski() that plots a Sierpinski triangle of order n to standard drawing. 
//Think recursively: sierpinski() should draw one filled equilateral triangle (pointed downwards) 
//and then call itself recursively three times (with an appropriate stopping condition). 
//It should draw 1 filled triangle for n = 1; 4 filled triangles for n = 2; and 13 filled triangles for n = 3; and so forth.

public class Sierpinski {

    //  Height of an equilateral triangle whose sides are of the specified length.
    public static double height(double length) {
        double h = length * Math.sqrt(3) / 2;
        return h;
    }

    public static void filledTriangle(double x, double y, double length) {
        double x1 = x + length / 2;
        double y2 = length;
        double x2 = x - length / 2;
        double y3 = lenght;
        StdDraw.filledPolygon(new double[] { x, x2, x3 }, new double[]
                { y, y2, y3 });

    }

    //  Draws a Sierpinski triangle of order n, such that the largest filled
    //  triangle has bottom vertex (x, y) and sides of the specified length.
    public static void sierpinski(int n, double x, double y, double length) {

    }

    //  Takes an integer command-line argument n;
    //  draws the outline of an equilateral triangle (pointed upwards) of length 1;
    //  whose bottom-left vertex is (0, 0) and bottom-right vertex is (1, 0); and
    //  draws a Sierpinski triangle of order n that fits snugly inside the outline.
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        double s = 1.0;
        sierpinski(n, 0.5, 0.0);
        sierpinski(n, )
    }
}
